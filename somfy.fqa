{"name":"Somfy","type":"com.fibaro.deviceController","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_260"},"sections":{"items":[{"components":[{"name":"lblMain","style":{"weight":"1.2"},"text":"Label","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_260"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"mqtt_host","type":"string","value":"192.168.95.142:1883"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- Device Controller is a little more advanced than other types. \n-- It can create child devices, so it can be used for handling multiple physical devices.\n-- E.g. when connecting to a hub, some cloud service or just when you want to represent a single physical device as multiple endpoints.\n-- \n-- Basic knowledge of object-oriented programming (oop) is required. \n-- Learn more about oop: https://en.wikipedia.org/wiki/Object-oriented_programming \n-- Learn more about managing child devices: https://manuals.fibaro.com/home-center-3-quick-apps/\n\nfunction talbeLength(t)\n    local counter = 0 \n    for k,v in pairs(t) do counter=counter+1 end\n    return counter\nend\n\nfunction QuickApp:onInit()\n    self:debug(\"QuickApp:onInit\")\n\n    -- Setup classes for child devices.\n    -- Here you can assign how child instances will be created.\n    -- If type is not defined, QuickAppChild will be used.\n    self:initChildDevices({\n        [\"com.fibaro.rollerShutter\"] = SomfySutter,\n    })\n\n    -- Print all child devices.\n    self:debug(\"Child devices:\")\n    for id,device in pairs(self.childDevices) do\n        self:debug(\"[\", id, \"]\", device.name, \", type of: \", device.type)\n    end\n    \n    self.deviceMap = self:buildDevicesMap()\n    self:updateView(\"lblMain\", \"text\", string.format(\"Devices found: %s\", talbeLength(self.deviceMap)))\n    self:mqtt_connect()\nend\n\nfunction QuickApp:buildDevicesMap()\n    --self:debug(\"QuickApp:buildDevicesMap()\")\n    local DM = {}\n    for hcID,child in pairs(self.childDevices) do\n        local shutter_id = child:getVariable(\"shutter_id\")\n        local shutter_name = child:getVariable(\"shutter_name\")\n        local shutter_cmd = child:getVariable(\"shutter_cmd\")\n        local shutter_state = child:getVariable(\"shutter_state\")\n\n        if (type(DM[shutter_id]) ~= \"table\") then\n            DM[shutter_id] = {\n                shutter_id = shutter_id,\n                shutter_name = shutter_name,\n                shutter_cmd = shutter_cmd,\n                shutter_state = shutter_state\n            }\n        end\n        DM[shutter_id]['hcID'] = hcID\n    end\n    self:debug(\"DevicesMap built from childs: \"..json.encode(DM))\n    return(DM)\nend\n\n-- Sample method to create a new child. It can be used in a button. \nfunction QuickApp:createChild(shutter)\n    local dev\n    if (type(self.deviceMap[shutter.unique_id]) ~= \"table\") then\n        local child = self:createChildDevice({\n        name = shutter.name,\n        type = \"com.fibaro.rollerShutter\",\n    }, SomfySutter)\n        if (child) then\n            child:setVariable(\"shutter_id\", shutter.unique_id)\n            dev = {\n                shutter_id = shutter_id,\n                hcID = child.id,\n                shutter\n            }\n        end\n    else \n        dev = self.deviceMap[shutter.unique_id]\n        dev['shutter']=shutter\n    end\n    hub.call(dev.hcID, \"setVariable\", \"shutter_name\", shutter.name)\n    hub.call(dev.hcID, \"setVariable\", \"shutter_cmd\", shutter.cmd)\n    hub.call(dev.hcID, \"setVariable\", \"shutter_state\", shutter.state)\n    hub.call(dev.hcID, \"connect\", dev.shutter)\nend\n\n-- Sample class for handling your binary switch logic. You can create as many classes as you need.\n-- Each device type you create should have its class which inherits from the QuickAppChild type.\nclass 'SomfySutter' (QuickAppChild)\n\n-- __init is a constructor for this class. All new classes must have it.\nfunction SomfySutter:__init(device)\n    QuickAppChild.__init(self, device) \n\n    self:debug(\"Sutter init\")\nend\n\nfunction SomfySutter:open()\n    self:debug(\"roller shutter opened\")\n    self.client:publish(self.device.set_position_topic, \"100\")\n    -- self:updateProperty(\"value\", 99)\nend\n\nfunction SomfySutter:close()\n    self:debug(\"roller shutter closed\")\n    self.client:publish(self.device.set_position_topic, \"0\")\n    -- self:updateProperty(\"value\", 0)\nend\n\nfunction SomfySutter:stop()\n    self:debug(\"roller shutter stopped \")\n    self.client:publish(self.device.set_position_topic, \"STOP\")\nend\n\n-- Value is type of integer (0-99)\nfunction SomfySutter:setValue(value)\n    self:debug(\"roller shutter set to: \" .. tostring(value))\n    \n    self.client:publish(self.device.set_position_topic, tostring(value))\n    -- self:updateProperty(\"value\", value)  \nend\n\nfunction SomfySutter:connect(device)\n    self.device = device\n    local mqtt_host = self.parent:getVariable(\"mqtt_host\")\n    self:debug(\"Connecting\", mqtt_host)\n    -- self:debug(\"Device\", json.encode(device))\n    self.client = mqtt.Client.connect(mqtt_host, {\n        clientId= 'fibaro_somfy_shutter' .. device.name,\n        qos= mqtt.QoS.AT_LEAST_ONCE,\n        retain = true\n    })\n\n    self.client:addEventListener('message', function(e) self:onMessage(e) end)\n    self.client:addEventListener('published', function(event) self:onPublished(event) end)    \n    self.client:addEventListener('connected', \n        function(event) \n            self:debug(\"Shutter connected\")\n            self.connected=true\n            self.client:subscribe(device.position_topic, {qos = mqtt.QoS.AT_LEAST_ONCE})\n        end)\nend\n\nfunction SomfySutter:onMessage(e)\n    local val = e.payload\n    self:debug(\"Value changed \", val, \"for device: \", self.device.name)\n    self:updateProperty(\"value\",tonumber(val))\nend\n\nfunction QuickApp:onPublished(e)\n    -- self:debug(json.encode(e))\nend\n"},{"name":"mqtt_api","isMain":false,"isOpen":true,"content":"function QuickApp:mqtt_connect()\n    self:debug(\"QuickApp:connecting to mqtt\")\n    self.client = mqtt.Client.connect(self:getVariable(\"mqtt_host\"), {\n        clientId= 'fibaro_somfy_client2',\n        qos= mqtt.QoS.AT_LEAST_ONCE,\n        retain = true\n    })\n    self.client:addEventListener('connected', function(event) self:onConnected(event) end)\n    \nend\n\nfunction QuickApp:onConnected(event)\n    local this = self\n    self:debug(\"client connected\")\n\n    self.client:addEventListener('message', function(mEvent) this:onMessage(mEvent) end)\n    self.client:addEventListener('subscribed', function(sEvent) this:onSubscribe(sEvent) end)\n    \n    self.client:subscribe('homeassistant/cover/+/config', {qos = mqtt.QoS.AT_LEAST_ONCE})\nend\n\nfunction QuickApp:onSubscribe(event)\n    self:debug(\"on subscribe\")\n    self:debug(json.encode(event))\nend\n\nfunction QuickApp:onMessage(e)\n    local shutter = json.decode(e.payload)\n    -- self.debug(shutter)\n    self:debug('shutter observed: ', shutter.name, shutter.unique_id)\n    self:createChild(shutter)\nend\n"}]}
